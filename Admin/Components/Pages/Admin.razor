@page "/admin"

@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Http
@using Microsoft.Extensions.Options
@using System.Text.Json.Serialization
@using global::Admin.Azure
@using global::Admin.Facebook
@using global::Azure.Data.AppConfiguration
@using global::Azure.Identity

@inject IOptions<FacebookOptions> facebookOptions
@inject IHttpContextAccessor httpContextAccessor
@inject IHttpClientFactory httpClientFactory
@inject IOptions<AzureOptions> azureOptions
    
@attribute [Authorize(Policy = "Admin")]

<PageTitle>Bodyline Sports (Admin)</PageTitle>

<AuthorizeView Context="authContext" Policy="Admin">
    <Authorized>
        <a class="flex justify-end pr-2" href="/Account/SignOut">Hello, @authContext.User.Identity?.Name!</a>
        <p>Token will expire on @TokenData?.ExpiresAt.ToString("dd MMM yy hh:mm:ss tt ")</p>
    </Authorized>
    <NotAuthorized>
    </NotAuthorized>
</AuthorizeView>

@code {
    class FacebookCode
    {
        public required string Code { get; set; }
    }

    class FacebookAccessToken
    {
        [JsonPropertyName("access_token")]
        public required string AccessToken { get; set; }
        [JsonPropertyName("machine_id")]
        public string? MachineId { get; set; }
    }

    private string? UserAccessToken { get; set; }
    private TokenData? TokenData { get; set; }

    protected async override Task OnInitializedAsync()
    {
        const string AccessTokenKey = $"{nameof(FacebookOptions)}:{nameof(FacebookOptions.AccessToken)}";

        var UserAccessToken = await SwapForLongLivedTokenAsync();

        TokenData = (await GetTokenDetailsAsync(UserAccessToken)).Data;

        var client = new ConfigurationClient(azureOptions.Value.AppConfigurationEndpoint, new DefaultAzureCredential());
        await client.SetConfigurationSettingAsync(new ConfigurationSetting(AccessTokenKey, UserAccessToken));

        await base.OnInitializedAsync();
    }

    protected override void OnInitialized()
    {
        if (httpContextAccessor.HttpContext?.User.Identity?.IsAuthenticated ?? false)
        {
            var authFeatures = httpContextAccessor.HttpContext?.Features.Get<IAuthenticateResultFeature>();
            var userAccessToken = authFeatures!.AuthenticateResult!.Properties!.GetTokenValue("access_token");
            UserAccessToken = userAccessToken!;
        }

        base.OnInitialized();
    }
    
    private async Task<TokenDetails> GetTokenDetailsAsync(string token)
    {
        var url = $"/debug_token?input_token={token}&access_token={UserAccessToken}";
        var httpClient = httpClientFactory.CreateClient("Facebook");
        var tokenDetails = await httpClient.GetFromJsonAsync<TokenDetails>(url);
        return tokenDetails!;
    }
    
    private async Task<string> SwapForLongLivedTokenAsync()
    {
        var redirectUri = "https://musical-waddle-qxxww7r7x5w2xjjp-7120.app.github.dev/signin-facebook";
        var codeUrl = $"/oauth/client_code?client_id={facebookOptions.Value.AppId}&client_secret={facebookOptions.Value.AppSecret}&redirect_uri={redirectUri}&access_token={facebookOptions.Value.AccessToken}";
        var httpClient = httpClientFactory.CreateClient("Facebook");
        var code = await httpClient.GetFromJsonAsync<FacebookCode>(codeUrl);

        var tokenUrl = $"/oauth/access_token?client_id={facebookOptions.Value.AppId}&redirect_uri={redirectUri}&code={code!.Code}";    
        var token = await httpClient.GetFromJsonAsync<FacebookAccessToken>(tokenUrl);

        return token!.AccessToken;
    }
}
