@using Microsoft.Extensions.Options
@using Web.Facebook

@inject IOptions<FacebookOptions> options
@inject ILogger<FacebookPosts> logger
@inject FacebookApiClient facebookApiClient

@if (IsLoading)
{
    <div class="flex justify-center items-center h-full text-black">
        <MessageWithTimer Message="Loading Facebook posts..." />
    </div>
}
else if (Posts.Count() > 0)
{
    @foreach (var post in Posts)
    {
        <article class="p-2 [background:canvas] rounded-xl shadow-md basis-4/5 shadow-black h-min [overflow-wrap:anywhere]">
            <p class="text-xs">@post.UpdatedDateTime.LocalDateTime.ToString(@"dd MMMM \a\t HH:mm")</p>
            <p class="pt-1">@((MarkupString?)(post.Message?.Replace("\n", "<br />") ?? string.Empty))</p>
            @if (post.Attachments.Length > 0)
            {
                @if (post.Attachments[0].SubAttachments.Length > 0)
                {
                    <FacebookPostsMultipleImages SubAttachments="post.Attachments[0].SubAttachments" />
                }
                else
                {
                    <FacebookPostsImage Attachment="post.Attachments[0]" />
                }
            }
        </article>
    }
}
else
{
    <p class="text-black">Error loading Facebook posts</p>
}

@code {
    private bool IsLoading { get; set; } = true;
    private IEnumerable<FacebookPost> Posts { get; set; } = [];

    protected override async Task OnInitializedAsync()
    {
        try
        {
            Posts = await facebookApiClient.GetPostsForGroup();
        }
        catch (HttpRequestException e)
        {
            logger.LogError(e, "{exceptionMessage} getting posts for group {groupId}", e.Message, options.Value.GroupId);
        }
        finally
        {
            IsLoading = false;
        }
    }
}